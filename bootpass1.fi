(define (Pair a b))

(define (Triple a b c))

(define (single x)
    (define (L1)
        (set x1 (cons x nil))
        (return x1)))

(define (append xs ys)
    (define (L1)
        (match xs
            (case Cons L2)
            (else L3)))
    (define (L2 u us)
        (L4 (append us ys)))
    (define (L3)
        (return ys))
    (define (L4 x1)
        (set x2 (cons u x1))
        (return x2)))

(define (P1TailCont))

(define (P1BlockCont label))

(define (P1TrivialCont x forms formsCont))

(define (pass1 hi1)
    (define (L1)
        (match hi1
            (case Cons L2)
            (else L3)))
    (define (L2 def defs)
        (L4 (pass1Toplevel def)))
    (define (L3)
        (return nil))
    (define (L4 x1)
        (L5 (pass1 defs)))
    (define (L5 x2)
        (set x3 (cons x1 x2))
        (return x3)))

(define (pass1Toplevel def)
    (define (L1)
        (match def
            (case HiDefineVar L2)
            (case HiDefineCons L3)
            (case HiDefineFunc L4)))
    (define (L2 x constant)
        (set x1 (FiDefineVar x constant))
        (return x1))
    (define (L3 c consArgs)
        (set x2 (FiDefineCons c consArgs))
        (return x2))
    (define (L4 f funcArgs blk)
        (match blk
            (case HiBlock L5)))
    (define (L5 expr defines)
        (match expr
            (case HiBegin L6)))
    (define (L6 forms)
        (set x3 (P1TailCont))
        (L7 (pass1Begin forms x3)))
    (define (L7 x4)
        (match x4
            (case Triple L8)))
    (define (L8 stmts xfer blks)
        (set x5 (genLabel))
        (set x6 (FiBlock x5 nil stmts xfer))
        (set x7 (cons x6 blks))
        (set x8 (FiDefineFunc f funcArgs x7))
        (return x8)))

(define (pass1Begin forms cont)
    (define (L1)
        (match forms
            (case Cons L2)))
    (define (L2 form moreForms)
        (match form
            (case HiDefineByMatch L3)
            (case HiDefineVar L4)
            (else L5)))
    (define (L3 c args blk)
        (match blk
            (case HiBlock L6)))
    (define (L4 x varBlk)
        (match varBlk
            (case HiBlock L7)))
    (define (L5)
        (return (pass1SimpleExpr form cont)))
    (define (L6 expr2 defines)
        (set x2 (HiBegin moreForms))
        (set x3 (HiBlock x2 nil))
        (set x4 (HiCase c args x3))
        (set x5 (cons x4 nil))
        (set x6 (HiMatch expr2 x5))
        (return (pass1SimpleExpr x6 cont)))
    (define (L7 expr varDefines)
        (set x1 (P1TrivialCont x moreForms cont))
        (return (pass1SimpleExpr expr x1))))

(define (pass1SimpleExpr expr cont)
    (define (L1)
        (match expr
            (case Fixnum L2)
            (case String L2)
            (case Id L3)
            (case HiConsApp L4)
            (case HiPrimApp L4)
            (case HiCall L5)
            (case HiMatch L6)))
    (define (L2)
        (return (pass1TrivialExpr expr cont)))
    (define (L3 name)
        (return (pass1TrivialExpr expr cont)))
    (define (L4 cp cpArgs)
        (return (pass1TrivialExpr expr cont)))
    (define (L5 f args)
        (return (pass1CallExpr f args cont)))
    (define (L6 test clauses)
        (return (pass1MatchExpr test clauses cont))))

(define (pass1CallExpr f args cont)
    (define (L1)
        (L2 (pass1ExplicitCont cont)))
    (define (L2 x1)
        (match x1
            (case Pair L3)))
    (define (L3 explicitCont contBlocks)
        (match explicitCont
            (case P1TailCont L4)
            (case P1BlockCont L5)))
    (define (L4)
        (set x2 (FiCall nil f args))
        (set x3 (Triple nil x2 nil))
        (return x3))
    (define (L5 label)
        (set x4 (FiCall label f args))
        (set x5 (Triple nil x4 contBlocks))
        (return x5)))

(define (pass1MatchExpr test clauses cont)
    (define (L1)
        (L2 (pass1LabeledClauses clauses)))
    (define (L2 labeledClauses)
        (L3 (pass1ExplicitCont cont)))
    (define (L3 x1)
        (match x1
            (case Pair L4)))
    (define (L4 explicitCont contBlocks)
        (L6 (pass1ClauseBlocks labeledClauses explicitCont)))
    (define (L5 x2)
        (set x3 (FiMatch test x2))
        (L7 (append contBlocks clauseBlocks)))
    (define (L6 clauseBlocks)
        (L5 (pass1TransformedClauses labeledClauses)))
    (define (L7 x4)
        (set x5 (Triple nil x3 x4))
        (return x5)))

(define (pass1TransformedClauses labeledClauses)
    (define (L1)
        (match labeledClauses
            (case Cons L2)
            (else L3)))
    (define (L2 labeledClause moreLabeledClauses)
        (match labeledClause
            (case Pair L4)))
    (define (L3)
        (return nil))
    (define (L4 label clause)
        (match clause
            (case HiCase L5)
            (case HiElse L6)))
    (define (L5 c caseArgs caseBlk)
        (set x1 (FiCase c label))
        (goto (L7 x1)))
    (define (L6 elseBlk)
        (set x2 (FiElse label))
        (goto (L7 x2)))
    (define (L7 x3)
        (L8 (pass1TransformedClauses moreLabeledClauses)))
    (define (L8 x4)
        (set x5 (cons x3 x4))
        (return x5)))

(define (pass1LabeledClauses clauses)
    (define (L1)
        (match clauses
            (case Cons L2)
            (else L3)))
    (define (L2 clause moreClauses)
        (set x1 (genLabel))
        (set x2 (Pair x1 clause))
        (return x2))
    (define (L3)
        (return nil)))

(define (pass1TrivialExpr expr cont)
    (define (L1)
        (match expr
            (case HiConsApp L2)
            (case HiPrimApp L3)
            (else L4)))
    (define (L2 c consArgs)
        (set x1 (FiConsApp c consArgs))
        (goto (L5 x1)))
    (define (L3 p primArgs)
        (set x2 (FiPrimApp p primArgs))
        (goto (L5 x2)))
    (define (L4)
        (goto (L5 expr)))
    (define (L5 fiExpr)
        (match cont
            (case P1TailCont L6)
            (case P1BlockCont L7)
            (case P1TrivialCont L8)))
    (define (L6)
        (set x (genTmp))
        (set x3 (FiStmt x fiExpr))
        (set x15 (cons x3 nil))
        (set x4 (FiReturn x))
        (set x5 (Triple x15 x4 nil))
        (return x5))
    (define (L7 label)
        (set y (genTmp))
        (set x6 (FiStmt y fiExpr))
        (set x7 (cons x6 nil))
        (set x8 (cons y nil))
        (set x9 (FiGoto label x8))
        (set x10 (Triple x7 x9 nil))
        (return x10))
    (define (L8 z forms formsCont)
        (L9 (pass1Begin forms formsCont)))
    (define (L9 x11)
        (match x11
            (case Triple L10)))
    (define (L10 stmts xfer blks)
        (set x12 (FiStmt z fiExpr))
        (set x13 (cons x12 stmts))
        (set x14 (Triple x13 xfer blks))
        (return x14)))

(define (pass1ClauseBlocks labeledClauses cont)
    (define (L1)
        (match labeledClauses
            (case Cons L2)
            (else L3)))
    (define (L2 labeledClause moreLabeledClauses)
        (L4 (pass1OneClauseBlocks labeledClause cont)))
    (define (L3)
        (return nil))
    (define (L4 x1)
        (L5 (pass1ClauseBlocks moreLabeledClauses cont)))
    (define (L5 x2)
        (return (append x1 x2))))

(define (pass1OneClauseBlocks labeledClause cont)
    (define (L1)
        (match labeledClause
            (case Pair L2)))
    (define (L2 label clause)
        (match clause
            (case HiCase L3)
            (case HiElse L4)))
    (define (L3 c caseArgs caseBlk)
        (goto (L5 caseArgs caseBlk)))
    (define (L4 elseBlk)
        (goto (L5 nil elseBlk)))
    (define (L5 args blk)
        (match blk
            (case HiBlock L6)))
    (define (L6 expr defines)
        (match expr
            (case HiBegin L7)))
    (define (L7 forms)
        (L8 (pass1Begin forms cont)))
    (define (L8 x1)
        (match x1
            (case Triple L9)))
    (define (L9 stmts xfer blks)
        (set x2 (FiBlock label args stmts xfer))
        (return (cons x2 blks))))

(define (pass1ExplicitCont cont)
    (define (L1)
        (match cont
            (case P1TrivialCont L2)
            (else L3)))
    (define (L2 x forms formsCont)
        (set label (genLabel))
        (L4 (pass1Begin forms formsCont)))
    (define (L3)
        (set x1 (Pair cont nil))
        (return x1))
    (define (L4 triple)
        (match triple
            (case Triple L5)))
    (define (L5 stmts xfer blks)
        (set args (cons x nil))
        (set blk (FiBlock label args stmts xfer))
        (set contBlocks (cons blk blks))
        (set explicitCont (P1BlockCont label))
        (set x2 (Pair explicitCont contBlocks))
        (return x2)))
